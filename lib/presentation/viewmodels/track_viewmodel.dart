import 'package:flutter/foundation.dart'; // Required for ChangeNotifier
import 'package:ecotrack/domain/entities/activity.dart'; // Import the Activity entity
import 'package:ecotrack/domain/use_cases/log_activity_use_case.dart'; // Import the Use Case interface

// TrackViewModel manages the state and presentation logic for the TrackScreen (Track View).
class TrackViewModel extends ChangeNotifier {
  // Dependency on the Use Case to log activities.
  final LogActivityUseCase _logActivityUseCase;

  // State properties for the Track View:
  bool _isLogging = false; // Indicates if an activity is currently being logged
  String? _logMessage; // Provides feedback after logging (success/error)
  String? _errorMessage; // Holds an error message if logging fails

  // Constructor: Use Provider to inject the LogActivityUseCase.
  TrackViewModel(this._logActivityUseCase);

  // Getters to expose the state to the View:
  bool get isLogging => _isLogging;
  String? get logMessage => _logMessage;
  String? get errorMessage => _errorMessage;

  // Method to log an activity. Called by the TrackScreen when the user submits data.
  Future<void> logActivity({
    required String category,
    required String type,
    required DateTime timestamp,
    required double value,
    required String unit,
    Map<String, dynamic>? details,
  }) async {
    _isLogging = true; // Set logging state to true
    _logMessage = null; // Clear previous messages
    _errorMessage = null; // Clear previous errors
    notifyListeners(); // Notify listeners to show loading/logging indicator

    try {
      // Create an Activity entity from the input data.
      // We'll let the repository implementation generate the ID.
      final newActivity = Activity(
        id: '', // ID will be generated by the repository
        category: category,
        type: type,
        timestamp: timestamp,
        value: value,
        unit: unit,
        details: details,
      );

      // Call the Use Case to execute the logging business logic.
      await _logActivityUseCase.execute(newActivity);

      _isLogging = false; // Set logging state to false
      _logMessage = 'Activity logged successfully!'; // Set success message
      notifyListeners(); // Notify listeners with success message

      // Optional: Clear input fields in the UI after successful logging.
      // The View (TrackScreen) would listen to the logMessage and handle this.
    } catch (e) {
      // Handle errors during logging
      _isLogging = false; // Set logging state to false
      _logMessage = null; // Clear success message
      _errorMessage =
          'Failed to log activity: ${e.toString()}'; // Set error message
      notifyListeners(); // Notify listeners with the error state
      print('Error logging activity: $e'); // Log the error
    }
  }

  // Remember to dispose of resources if needed.
  @override
  void dispose() {
    // Clean up resources if any
    super.dispose();
  }
}
