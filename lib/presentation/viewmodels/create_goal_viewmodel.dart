import 'package:flutter/foundation.dart'; // Required for ChangeNotifier
import 'package:ecotrack/domain/entities/goal.dart'; // Import the Goal entity
import 'package:ecotrack/domain/use_cases/create_goal_use_case.dart'; // Import the Use Case interface

// CreateGoalViewModel manages the state and logic for the CreateGoalScreen.
class CreateGoalViewModel extends ChangeNotifier {
  // Dependency on the Use Case to create goals.
  final CreateGoalUseCase _createGoalUseCase;

  // State properties for the Create Goal View:
  bool _isSaving = false; // Indicates if a goal is currently being saved
  String? _saveMessage; // Provides feedback after saving (success/error)
  String? _errorMessage; // Holds an error message if saving fails

  // Constructor: Use Provider to inject the CreateGoalUseCase.
  CreateGoalViewModel(this._createGoalUseCase);

  // Getters to expose the state to the View:
  bool get isSaving => _isSaving;
  String? get saveMessage => _saveMessage;
  String? get errorMessage => _errorMessage;

  // --- New Methods to Clear Messages ---
  // Call this from the View after the success message has been handled.
  void clearSaveMessage() {
    _saveMessage = null;
    notifyListeners(); // Notify listeners that the message is cleared
  }

  // Call this from the View after the error message has been handled.
  void clearErrorMessage() {
    _errorMessage = null;
    notifyListeners(); // Notify listeners that the message is cleared
  }
  // --- End New Methods ---

  // Method to create a new goal. Called by the CreateGoalScreen when the form is submitted.
  Future<void> createGoal({
    required String name,
    required String description,
    required String type,
    required String targetUnit,
    required double targetValue,
    required DateTime startDate,
    required DateTime endDate,
    String status = 'Active', // Default status
    Map<String, dynamic>? details,
  }) async {
    _isSaving = true; // Set saving state to true
    _saveMessage = null; // Clear previous messages before starting
    _errorMessage = null; // Clear previous errors before starting
    notifyListeners(); // Notify listeners to show loading indicator

    try {
      // Create a Goal entity from the input data.
      // We'll let the repository implementation generate the ID.
      final newGoal = Goal(
        id: '', // ID will be generated by the repository
        name: name,
        description: description,
        type: type,
        targetUnit: targetUnit,
        targetValue: targetValue,
        startDate: startDate,
        endDate: endDate,
        status: status,
        details: details,
      );

      // Call the Use Case to execute the goal creation business logic.
      final goalId = await _createGoalUseCase.execute(newGoal);

      _isSaving = false; // Set saving state to false
      _saveMessage =
          'Goal created successfully with ID: $goalId'; // Set success message
      // notifyListeners(); // Notify listeners with success message (called after clear)

      // Note: We will call notifyListeners after clearing the message in the View.
      // This prevents the message from lingering.
    } catch (e) {
      // Handle errors during saving
      _isSaving = false; // Set saving state to false
      _saveMessage = null; // Clear success message
      _errorMessage =
          'Failed to create goal: ${e.toString()}'; // Set error message
      // notifyListeners(); // Notify listeners with the error state (called after clear)
      print('Error creating goal: $e'); // Log the error
    } finally {
      // Ensure listeners are notified after state update, even on error.
      // This single notifyListeners call covers both success and error paths
      // after _isSaving, _saveMessage, or _errorMessage are updated.
      notifyListeners();
    }
  }

  // Remember to dispose of resources if needed.
  @override
  void dispose() {
    // Clean up resources if any
    super.dispose();
  }
}
