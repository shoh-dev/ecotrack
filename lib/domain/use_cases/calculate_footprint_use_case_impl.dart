import 'package:ecotrack/domain/entities/activity.dart'; // Import Activity entity
import 'package:ecotrack/domain/entities/footprint_entry.dart'; // Import FootprintEntry entity
import 'package:ecotrack/domain/entities/emission_factor.dart'; // Import EmissionFactor entity
import 'package:ecotrack/domain/entities/user_profile.dart'; // Import UserProfile entity
import 'package:ecotrack/domain/repositories/activity_repository.dart'; // Import ActivityRepository interface
import 'package:ecotrack/domain/repositories/emission_factor_repository.dart'; // Import EmissionFactorRepository interface
import 'package:ecotrack/domain/repositories/user_profile_repository.dart'; // New: Import UserProfileRepository interface
import 'package:ecotrack/domain/use_cases/calculate_footprint_use_case.dart'; // Import abstract Use Case interface

// Concrete implementation of the CalculateFootprintUseCase.
// Calculates the total CO2e footprint based on logged activities and emission factors.
class CalculateFootprintUseCaseImpl implements CalculateFootprintUseCase {
  final ActivityRepository _activityRepository; // Dependency to get activities
  final EmissionFactorRepository
  _emissionFactorRepository; // Dependency to get emission factors
  final UserProfileRepository
  _userProfileRepository; // New: Dependency to get user location

  // Constructor: Inject dependencies.
  CalculateFootprintUseCaseImpl(
    this._activityRepository,
    this._emissionFactorRepository,
    this._userProfileRepository,
  ); // Inject UserProfileRepository

  @override
  Future<FootprintEntry> execute() async {
    print('CalculateFootprintUseCase: Starting calculation...'); // Debug log

    // 1. Get all activities from the repository.
    // In a real app, we might filter by a time range (e.g., last month).
    final allActivities = await _activityRepository.getActivities();
    print(
      'CalculateFootprintUseCase: Fetched ${allActivities.length} activities.',
    ); // Debug log

    // 2. Get the user profile to access location for location-based factors.
    final userProfile = await _userProfileRepository.getUserProfile();
    print(
      'CalculateFootprintUseCase: Fetched user profile (found: ${userProfile != null}). Location: ${userProfile?.location}',
    ); // New Debug log

    double totalCo2e = 0.0;
    final Map<String, double> categoryBreakdown = {};

    // 3. Iterate through activities and calculate CO2e using emission factors.
    for (final activity in allActivities) {
      print(
        'CalculateFootprintUseCase: Processing activity: ${activity.category}, Value: ${activity.value} ${activity.unit}, Details: ${activity.details}',
      ); // Debug log

      // Look up the emission factor for this activity, passing details and location.
      final factor = await _emissionFactorRepository.getFactorForActivity(
        activityCategory: activity.category,
        activityType: activity.type,
        unit: activity.unit,
        timestamp:
            activity.timestamp, // Pass timestamp if factors are time-sensitive
        details: activity.details, // Pass activity details
        location: userProfile?.location, // Pass user location
      );

      if (factor != null) {
        // Factor found, calculate CO2e.
        final activityCo2e = activity.value * factor.co2ePerUnit;
        print(
          'CalculateFootprintUseCase: Found factor ${factor.co2ePerUnit} ${factor.unit}/CO2e. Calculated activityCo2e = ${activityCo2e.toStringAsFixed(2)}',
        ); // Debug log

        totalCo2e += activityCo2e;

        // Add to category breakdown.
        categoryBreakdown[activity.category] =
            (categoryBreakdown[activity.category] ?? 0.0) + activityCo2e;
      } else {
        // No factor found for this activity.
        print(
          'CalculateFootprintUseCase: No emission factor found for ${activity.category} - ${activity.type} (${activity.unit}) with details ${activity.details} and location ${userProfile?.location}. Skipping calculation for this activity.',
        ); // Debug log
        // This activity will not contribute to the footprint calculation.
      }
    }

    print(
      'CalculateFootprintUseCase: Final totalCo2e = ${totalCo2e.toStringAsFixed(2)}',
    ); // Debug log
    print(
      'CalculateFootprintUseCase: Final categoryBreakdown = $categoryBreakdown',
    ); // Debug log
    print('CalculateFootprintUseCase: Calculation complete.'); // Debug log

    // 4. Return a new FootprintEntry with the calculated data.
    return FootprintEntry(
      id: '', // ID will be generated by the repository
      timestamp: DateTime.now(), // Timestamp of the calculation
      totalCo2e: totalCo2e,
      categoryBreakdown: categoryBreakdown,
      // You might add a reference to the activities used for calculation later
      // activityIds: allActivities.map((a) => a.id).toList(),
    );
  }
}
